#!/usr/bin/env php
<?php
require('vendor/autoload.php');

use phpseclib\Net\Net_SFTP;

$config = [
    'default_ip'        => '192.168.1.20',
    'default_user'      => 'ubnt',
    'default_pass'      => 'ubnt',
    'ssh_init_wait'     => 8,
    'ssh_tries'         => 5,
    'ssh_try_wait'      => 10,
    'unii_actvn_coname' => 'xxx',
    'unii_actvn_key'    => 'xxx',
    'firmware_dir'      => '/home/sean/initubnt/firmware',
    'config_dir'        => '/home/sean/initubnt/configs',

    // if you want to output to slack instead of CLI
    'slack_incoming_webhook_url' => '',
    'slack_channel'              => '' // #something
];

$skip_firmware_update = false;
$skip_unii_activation = false;
$skip_config_load     = false;
$daemonize            = false;

$optind = 0;
$options = getopt('hfcud', [], $optind);
if (isset($options['h']))
    usage();

if (isset($options['f'])) $skip_firmware_update = true;
if (isset($options['u'])) $skip_unii_activation = true;
if (isset($options['c'])) $skip_config_load = true;
if (isset($options['d'])) $daemonize = true;

if (isset($_SERVER['argv'][$optind])) {
    $output_prepend = $_SERVER['argv'][$optind];
} else {
    $output_prepend = '';
}

if ($skip_firmware_update && $skip_unii_activation && $skip_config_load)
    die("error: all skips activated, nothing to do!\n");

if ($daemonize) {
    $pid = pcntl_fork();
    if ($pid == -1) {
        die("Failed to pcntl_fork()!\n");
    } else if ($pid) { // parent process
        exit(0);
    } else { // child
        $sid = \posix_setsid();

        fclose(STDIN);
        fclose(STDOUT);
        fclose(STDERR);
        chdir('/');

        $stdIn = fopen('/dev/null', 'r');
        $stdOut = fopen('/dev/null', 'w');
        $stdErr = fopen('php://stdout', 'w');
    }
}

$operating = true;
while (true)
{
    msg('notice', "Waiting for device @ {$config['default_ip']}...", false, true);
    while (true)
    {
        print_spinner();
        if (!ubnt_is_alive($config['default_ip']))
            $operating = true;
        else if ($operating)
            break;
        usleep(200000);
    }
    print_spinner(true);
    msg(null, "ok", true, true);

    msg('notice', "Device at {$config['default_ip']} is alive, waiting {$config['ssh_init_wait']}s for boot.");
    sleep($config['ssh_init_wait']);

    $ussh = new UBNT_SSH($config['default_ip'], $config['default_user'], $config['default_pass']);
    $connected = false;
    for ($try = 1; $try <= $config['ssh_tries']; $try++)
    {
        //
        // ssh into radio
        //
        msg('notice', "SSHing into device...", false);
        if (!$ussh->connect())
        {
            msg(null, "failed, attempt $try/{$config['ssh_tries']}");
            sleep($config['ssh_try_wait']);
            continue;
        }
        else
        {
            $connected = true;
            msg(null, "ok", true);
            break;
        }
    }
    if (!$connected)
        msg('error', 'failed to connect to ssh on device');

    /* connect() now does login as well
    msg('notice', "Logging into device...", false);
    if (!$ussh->login())
    {
        msg('error', 'failed to login to ssh on device');
        continue;
    }
    else
        msg(null, "ok", true);
    */

    //
    // fetch model of radio
    //
    msg('notice', "Fetching stats of device...", false);
    if (!($stats = ubnt_get_stats($ussh)))
    {
        msg('error', "failed to get stats from device");
        continue;
    }
    else
    {
        $model = null;
        if (isset($stats->host->devmodel))
            $model = trim($stats->host->devmodel);
        else if (isset($stats->host->hostname))
            $model = trim($stats->host->hostname);
        else
            msg('error', 'failed to determine model');

        if ($model)
        {
            if (strstr($model, 'M5'))
                $model .= ' ' . (isset($stats->host->fwprefix) ? trim($stats->host->fwprefix) : 'XM');
            msg(null, "ok ($model)");
        }
    }

    //
    // update firmware
    //
    if (!$skip_firmware_update)
    {
        $firmware_file = $config['firmware_dir'] . '/' . $model . '/fwupdate.bin';
        if (!file_exists($firmware_file))
        {
            msg('error', "Firmware file non-existant: $firmware_file");
            continue;
        }
        msg('notice', "Uploading firmware at $firmware_file and rebooting... ", false);
        if (($ret = ubnt_update_firmware($ussh, $firmware_file)) == -1)
        {
            msg(null, "no response after update");
            $operating = false;
            continue;
        }
        else if ($ret == 0)
        {
            msg('error', 'failed to update firmware on device');
            continue;
        }
        else
            msg(null, "ok");

        //
        // ssh back into radio
        //
        msg('notice', "Device at {$config['default_ip']} is alive, waiting {$config['ssh_init_wait']}s for boot.");
        sleep($config['ssh_init_wait']);

        $ussh = new UBNT_SSH($config['default_ip'], $config['default_user'], $config['default_pass']);
        $connected = false;
        for ($try = 1; $try <= $config['ssh_tries']; $try++)
        {
            //
            // ssh into radio
            //
            msg('notice', "SSHing into device...", false);
            if (!$ussh->connect())
            {
                msg(null, "failed, attempt $try/{$config['ssh_tries']}");
                sleep($config['ssh_try_wait']);
                continue;
            }
            else
            {
                $connected = true;
                msg(null, "ok");
                break;
            }
        }
        if (!$connected)
            msg('error', 'failed to connect to ssh on device');

        msg('notice', "Logging into device...", false);
        if (!$ussh->login())
        {
            msg('error', 'failed to login to ssh on device');
            continue;
        }
        else
            msg(null, "ok");
    }

    if (!$skip_config_load)
    {
        //
        // upload config
        //
        $config_file = $config['config_dir'] . '/' . $model . '/system.cfg';
        if (!file_exists($config_file))
        {
            msg('error', "Config file non-existant: $config_file");
            continue;
        }
        msg('notice', "Uploading config at $config_file...", false);
        if (!ubnt_upload_config($ussh, $config_file))
        {
            msg('error', 'failed to upload config file to device');
            continue;
        }
        else
            msg(null, "ok");
    }

    if (!$skip_unii_activation)
    {
        //
        // check unii activation
        //
        msg('notice', "Checking UNII activation...", false);
        if (($unii_activated_rv = ubnt_is_unii_activated($ussh, $model)) < 0)
            msg(null, "unknown!");
        else if ($unii_activated_rv == 1)
            msg(null, "already active.");
        else
            msg(null, "not yet activated.");

        //
        // apply unii activation
        //
        if ($unii_activated_rv != 1)
        {
            msg('notice', "Applying UNII activation...", false);
            if (($rv = ubnt_apply_unii_activation($ussh, $model, $config['unii_actvn_coname'], $config['unii_actvn_key'])) < 0)
                msg(null, "unknown!");
            else if ($rv == 1)
                msg(null, "successful activation.");
            else if ($rv == 0)
                msg(null, "appears to have deactivated instead.");
        }
    }

    if (!$skip_unii_activation || !$skip_config_load)
    {
        //
        // apply config, reboot
        //
        msg('notice', "Saving, rebooting... ", false);
        if (($ret = ubnt_apply_config($ussh)) == -1)
            msg(null, "no response after reboot");
        else if ($ret)
            msg(null, "ok");
    }

    $operating = false;

    msg('notice', "completed (LAN Speed/Duplex: " .  get_iface_speed_duplex($stats, 'eth0') . ")");
}

function msg($type, $msg, $nl = true, $cliOnly = false)
{
    global $operating, $config, $output_prepend, $daemonize;

    static $lastMsg = ''; // only for slack integration

    $output = ($output_prepend ? "[$output_prepend] " : '');
    if ($type === null) {
        $output .= $msg . ($nl ? "\n" : "");
    } else {
        $output .= "$type: $msg" . ($nl ? "\n" : "");
    }

    if (!$cliOnly && $config['slack_incoming_webhook_url']) {
        if (substr($msg, -3) == '...') {
            $lastMsg = $output;
        } else {
            if ($lastMsg) {
                $output = $lastMsg . $output;
                $lastMsg = '';
            }
            slack_post_message($config['slack_channel'], $output);
        }
    } else if (!$daemonize) {
        echo $output;
    }
    if ($type == 'error')
        $operating = false;
}

function ubnt_is_alive($ip)
{
    if (!($fp = @fsockopen($ip, 22, $errno, $errstr, 1)))
    {
        if ($errno == 111)
            return true;
        return false;
    }
    fclose($fp);
    return true;
}

function ubnt_get_stats(UBNT_SSH $ussh, $ip = null)
{
    global $config;

    if (!$ip) $ip = $config['default_ip'];

    $output = $ussh->cmd("/usr/www/status.cgi");
    $output = preg_replace('/^Content\-Type:\s+(.+?)[\r\n]+/im', '', $output);
    if ($stats = json_decode($output))
        return $stats;
    return null;
}

function get_iface_speed_duplex($stats, $iface, $color = true)
{
    if (!isset($stats->interfaces)) return "";
    foreach ($stats->interfaces as $i)
    {
        if ($i->ifname == $iface)
        {
            if ($color)
            {
                $ret = "";
                if ($i->status->duplex)
                    $ret .= "\033[32m";
                else
                    $ret .= "\033[41m";
                $ret .= $i->status->speed . "/" . ($i->status->duplex ? 'FDX' : 'HDX');
                if ($i->status->duplex)
                    $ret .= "\033[0m";
                else
                    $ret .= "\033[0m";
                return $ret;
            }
            else
                return $i->status->speed . "/" . ($i->status->duplex ? 'FDX' : 'HDX');
        }
    }
    return "";
}

function ubnt_update_firmware(UBNT_SSH $ussh, $file)
{
    if ($ussh->send_file($file, "/tmp/fwupdate.bin"))
    {
        $output = $ussh->cmd("/sbin/fwupdate -m");
        sleep(5);
        // try 120 times for device to come back
        $max = 120;
        for ($i = 1; $i <= $max && !ubnt_is_alive($ussh->getIp()); $i++)
        {
            print_spinner();
            usleep(200000);
        }
        print_spinner(true);
        if (!ubnt_is_alive($ussh->getIp()) && $i == $max+1)
            return -1;
        return 1;
    }
    return 0;
}

function ubnt_upload_config(UBNT_SSH $ussh, $file)
{
    if ($ussh->send_file($file, "/tmp/system.cfg"))
        return true;
    return false;
}

function ubnt_is_unii_activated(UBNT_SSH $ussh, $model)
{
    if (strstr($model, 'M5'))
        $cmd = "ubntbox dfs-unlock 2>&1";
    else
        $cmd = "ubntbox fcc-lock -s 2>&1";
    $output = $ussh->cmd($cmd);
    if (strstr($model, 'M5'))
    {
        /*
         * FCC DFS frequencies are enabled.
         * FCC DFS NEW GRANT is enabled
         */
        $dfs_freq = $dfs_new_grant = null;
        foreach (preg_split('/[\r\n]+/', $output) as $line)
        {
            if (preg_match('/FCC DFS frequencies are (enabled|disabled)/', ($line = trim($line)), $m))
            {
                if ($m[1] == 'enabled')
                    $dfs_freq = true;
                else if ($m[1] == 'disabled')
                    $dfs_freq = false;
            }
            else if (preg_match('/FCC DFS NEW GRANT is (enabled|disabled)/', $line, $m))
            {
                if ($m[1] == 'enabled')
                    $dfs_new_grant = true;
                else if ($m[1] == 'disabled')
                    $dfs_new_grant = false;
            }
        }
        if ($dfs_freq === true && $dfs_new_grant == true)
            return 1;
        else if ($dfs_freq === null || $dfs_new_grant === null)
            return -1;
        else
           return 0;
    }
    else
    {
        if (preg_match('/are (enabled|disabled)\.$/', trim($output), $m))
        {
            if ($m[1] == 'enabled')
                return 1;
            else if ($m[1] == 'disabled')
                return 0;
        }
        return -1;
    }
}

function ubnt_apply_unii_activation(UBNT_SSH $ussh, $model, $coname, $key)
{
    $key = str_replace('-', '', $key);
    if (strstr($model, 'M5'))
        $cmd = "ubntbox dfs-unlock -u \"$coname\" $key 2>&1";
    else
        $cmd = "ubntbox fcc-lock -c unii \"$coname\" $key 2>&1";

    $output = trim($ussh->cmd($cmd));
    sleep(2);
    if (strstr($model, 'M5'))
    {
        if (strstr($output, 'Enabling FCC DFS NEW GRANT'))
            return 1;
        return 0;
    }
    else
    {
        // Switching FCC UNII rules from activated to deactivated
        if (preg_match('/from (activated|deactivated|deactivatd) to (activated|deactivated|deactivatd)/', $output, $m))
        {
            if (($m[1] == 'deactivated' || $m[1] == 'deactivatd') && $m[2] == 'activated')
                return 1;
            else if ($m[1] == 'activated' && ($m[2] == 'dectivated' || $m[2] == 'dectivatd'))
                return 0;
        }
    }
    return -1;
}

function ubnt_apply_config(UBNT_SSH $ussh)
{
    $ussh->cmd("cfgmtd -w -p /etc/");
    sleep(3);
    $ussh->cmd("reboot");
    sleep(5);

    // try 90 times (wait for come back)
    $max = 90;
    for ($i = 1; $i <= $max && !ubnt_is_alive($ussh->getIp()); $i++)
    {
        print_spinner();
        usleep(200000);
    }
    print_spinner(true);

    if (!ubnt_is_alive($ussh->getIp()) && $i == $max+1)
           return -1;

    return 1;
}

class UBNT_SSH
{
    private $ip;
    private $user;
    private $pass;
    private $ssh;

    public function __construct($ip, $user, $pass)
    {
        $this->ip = $ip;
        $this->user = $user;
        $this->pass = $pass;
    }

    public function getIp()
    {
        return $this->ip;
    }

    public function connect()
    {
        $this->ssh = new Net_SFTP($this->ip, 22, 5);
        if (!$this->ssh->login($this->user, $this->pass)) {
            $this->ssh = null;
            return false;
        }
        return true;
        /*
                if ($this->ssh->login($username, $password)) {
        if (!($this->ssh = @ssh2_connect($this->ip, 22)))
            return false;

        return true;
        */
    }

    public function login()
    {
        if (!$this->ssh->login($this->user, $this->pass)) {
            return false;
        }
        return true;
        /*
        if (!@ssh2_auth_password($this->ssh, $this->user, $this->pass))
            return false;
        return true;
        */
    }

    public function disconnect()
    {
        $this->ssh = null;
    }

    public function cmd($cmd)
    {
        if (!$this->ssh) return false;

        $output = $this->ssh->exec($cmd);
        return $output;

        /*

        $stream = ssh2_exec($this->ssh, $cmd);
        stream_set_blocking($stream, true);
        $data = '';
        while ($buffer = fread($stream, 4096))
            $data .= $buffer;
        fclose($stream);

        return $data;
        */
    }

    public function send_file($local, $remote, $mode = 0644)
    {
        if (!file_exists($local))
            return false;

        if ($this->ssh->put($remote, $local, SFTP::SOURCE_LOCAL_FILE)) {
            if (!$this->ssh->chmod($mode, $remote)) {
                return true;
            }
        }
        return false;

        //return ssh2_scp_send($this->ssh, $local, $remote, $mode);
    }
}

function print_spinner($reset = false)
{
    global $config, $daemonize;

    if ($config['slack_incoming_webhook_url'] || $daemonize) {
        return;
    }

    $spinner = ["|", "/", "-", "\\"];
    static $last = null;
    if ($reset)
    {
        if ($last !== null)
            echo "\x08\x08\x08   \x08\x08\x08";
        $last = null;
        return;
    }
    if ($last !== null)
    {
        echo "\x08\x08\x08";
        $next = $last == count($spinner)-1 ? 0 : $last+1;
    }
    else
        $next = 0;
    echo "[" . ($spinner[$last = $next]) . "]";
}

function slack_post_message($channel, $msg)
{
    global $config;

    $data = new StdClass();
    $data->text = $msg;
    $data->channel = $channel;
    $data->username = "initubnt";
    $payload = json_encode($data);
    $ch = curl_init($config['slack_incoming_webhook_url']);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($payload)
    ]);
    $result = trim(curl_exec($ch));
    if ($result == 'ok') {
        return true;
    }
    return false;
}


function usage()
{
    die(
        "{$_SERVER['argv'][0]} [-f] [-c] [-u] [-h] [output prepend string]\n" .
        "    -f Skip firmware update\n" .
        "    -c Skip config load\n" .
        "    -u Skip UNII activation\n" .
        "    -d Daemonize\n" .
        "    -h Show this help\n"
    );
}
